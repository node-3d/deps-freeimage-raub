# -*- Makefile -*-
# Mac OSX makefile for FreeImage

# This file can be generated by ./gensrclist.sh
include Makefile.srcs

# Find SDK path via xcode-select, backwards compatible with Xcode vers < 4.5
MACOSX_SYSROOT = $(shell xcrun --show-sdk-path)
# Specify deployement target here
MACOSX_DEPLOYMENT_TARGET = 10.11

# General configuration variables:
CC_I386 = $(shell xcrun -find clang)
CC_arm64 = $(shell xcrun -find clang)
CPP_I386 = $(shell xcrun -find clang++)
CPP_arm64 = $(shell xcrun -find clang++)
MACOSX_DEPLOY = -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)
COMPILERFLAGS = -Os -fexceptions -fvisibility=hidden -DNO_LCMS -D__ANSI__ -Wno-everything -DDISABLE_PERF_MEASUREMENT
COMPILERFLAGS_I386 = -arch i386
COMPILERFLAGS_arm64 = -arch arm64
COMPILERPPFLAGS = -Wno-ctor-dtor-privacy -D__ANSI__ -std=c++11 -stdlib=libc++ -Wc++11-narrowing
INCLUDE +=
INCLUDE_I386 = -isysroot $(MACOSX_SYSROOT)
INCLUDE_arm64 = -isysroot $(MACOSX_SYSROOT)
CFLAGS_I386 = $(COMPILERFLAGS) $(COMPILERFLAGS_I386) $(INCLUDE) $(INCLUDE_I386) $(MACOSX_DEPLOY)
CFLAGS_arm64 = $(COMPILERFLAGS) $(COMPILERFLAGS_arm64) $(INCLUDE) $(INCLUDE_arm64) $(MACOSX_DEPLOY)
CPPFLAGS_I386 = $(COMPILERPPFLAGS) $(CFLAGS_I386)
CPPFLAGS_arm64 = $(COMPILERPPFLAGS) $(CFLAGS_arm64)
LIBRARIES_I386 = $(MACOSX_DEPLOY) -Wl,-syslibroot $(MACOSX_SYSROOT)
LIBRARIES_arm64 = $(MACOSX_DEPLOY) -Wl,-syslibroot $(MACOSX_SYSROOT)
LIBTOOL = libtool
LIPO = lipo

TARGET = freeimage
STATICLIB = lib$(TARGET).a
SHAREDLIB = lib$(TARGET)-$(VER_MAJOR).$(VER_MINOR).dylib
LIBNAME = lib$(TARGET).$(VER_MAJOR).dylib
HEADER = Source/FreeImage.h

.SUFFIXES: .o-i386 .o-arm64
MODULES_I386 = $(SRCS:.c=.o-i386)
MODULES_arm64 = $(SRCS:.c=.o-arm64)
MODULES_I386 := $(MODULES_I386:.cpp=.o-i386)
MODULES_arm64 := $(MODULES_arm64:.cpp=.o-arm64)

PREFIX = /usr/local
INSTALLDIR = $(PREFIX)/lib
INCDIR = $(PREFIX)/include

default: all

all: dist

# ONLY STATIC AND 64 BIT // START ---

dist: FreeImage
	cp *.a Dist
	cp Source/FreeImage.h Dist

FreeImage: $(STATICLIB)

$(STATICLIB): $(STATICLIB)-arm64
	cp -p $(STATICLIB)-arm64 $(STATICLIB)

# --- END

# STATIC AND DYNAMIC 32 and 64 BIT // START ---

#dist: FreeImage
#	cp *.a Dist
#	cp *.dylib Dist
#	cp Source/FreeImage.h Dist

# FreeImage: $(STATICLIB) $(SHAREDLIB )

#$(STATICLIB): $(STATICLIB)-i386 $(STATICLIB)-arm64
#	$(LIPO) -create $(STATICLIB)-i386 $(STATICLIB)-arm64 -output $(STATICLIB)

# --- END

$(STATICLIB)-i386: $(MODULES_I386)
	$(LIBTOOL) -arch_only i386 -o $@ $(MODULES_I386)

$(STATICLIB)-arm64: $(MODULES_arm64)
	$(LIBTOOL) -arch_only arm64 -o $@ $(MODULES_arm64)

$(SHAREDLIB): $(SHAREDLIB)-i386 $(SHAREDLIB)-arm64
	$(LIPO) -create $(SHAREDLIB)-i386 $(SHAREDLIB)-arm64 -output $(SHAREDLIB)

$(SHAREDLIB)-i386: $(MODULES_I386)
	$(CPP_I386) -arch i386 -dynamiclib $(LIBRARIES_I386) -o $@ $(MODULES_I386)

$(SHAREDLIB)-arm64: $(MODULES_arm64)
	$(CPP_arm64) -arch arm64 -dynamiclib $(LIBRARIES_arm64) -o $@ $(MODULES_arm64)

.c.o-i386:
	$(CC_I386) $(CFLAGS_I386) -c $< -o $@

.c.o-arm64:
	$(CC_arm64) $(CFLAGS_arm64) -c $< -o $@

.cpp.o-i386:
	$(CPP_I386) $(CPPFLAGS_I386) -c $< -o $@

.cpp.o-arm64:
	$(CPP_arm64) $(CPPFLAGS_arm64) -c $< -o $@

install:
	install -d -m 755 -o root -g wheel $(INCDIR) $(INSTALLDIR)
	install -m 644 -o root -g wheel $(HEADER) $(INCDIR)
	install -m 644 -o root -g wheel $(SHAREDLIB) $(STATICLIB) $(INSTALLDIR)
	ranlib -sf $(INSTALLDIR)/$(STATICLIB)
	ln -sf $(SHAREDLIB) $(INSTALLDIR)/$(LIBNAME)

clean:
	rm -f core Dist/*.* u2dtmp* $(MODULES_I386) $(MODULES_arm64) $(STATICLIB) $(STATICLIB)-i386 $(SHAREDLIB) $(SHAREDLIB)-i386 $(SHAREDLIB)-arm64
